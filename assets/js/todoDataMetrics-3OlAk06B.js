import{X as e,d as t,Y as o}from"./icon-alert-Cei3Tz55.js";import{loadTodoAddin as a}from"./addin-eV6CQgSY.js";import"./localStorage-BThj8CCp.js";import"./preload-helper-xKIU3iAw.js";import"./string-CbqVM-Zr.js";import"./style-DUHjVTJK.js";import"./ViewState-Wts6aMTb.js";import"./main-Bw6ngw5x.js";import"./handlebarLoader-xbtIzd6B.js";const r=e(""),d=t("todoStats",{state:()=>({loaded:!1}),getters:{todoCompletedSince(){return e=>{if(!this.loaded)return 0;if(r.value)return 0;const t=localStorage.getItem("todolist-1");if(!t)return 0;const o=t.split(",").reduce(((e,t)=>Object.assign(e,(e=>{const t=localStorage.getItem(e),o={};return t?(t.split(",").forEach((t=>{o[t]=localStorage.getObject(`${e}-${t}`)})),o):o})("todo-"+t))),{});return Object.values(o).filter((t=>t.done&&new Date(t.completedDate).getTime()>e)).length}},unsupportedMetrics:()=>r.value?["todoCompletedSince"]:[]},actions:{refresh(){(async()=>{await a();const e=m.views.todoPane,t=(await e.manager.getMomoLists()).getListOfType("done"),d=()=>e.todoList.model.activeProvider.get("provider_url");m.on("todo:providerChanged",(()=>{null==t||t.doFetchIfNeeded(!0),r.value=d()})),m.on("todo:loadingStateChange",(()=>o(r))),d()||null==t||t.doFetchIfNeeded(),r.value=d(),this.loaded=!0})()}}}),s=()=>d();export{s as default};